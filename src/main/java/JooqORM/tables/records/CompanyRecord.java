/**
 * This class is generated by jOOQ
 */
package JooqORM.tables.records;


import JooqORM.tables.Company;

import java.sql.Time;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyRecord extends UpdatableRecordImpl<CompanyRecord> implements Record15<String, String, Double, Time, Double, Double, Double, Double, Double, Double, Double, Double, Integer, Integer, Time> {

    private static final long serialVersionUID = 686527142;

    /**
     * Setter for <code>ChineseStock.Company.stockid</code>. 股票ID
     */
    public void setStockid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.stockid</code>. 股票ID
     */
    public String getStockid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ChineseStock.Company.companyname</code>. 公司名称
     */
    public void setCompanyname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.companyname</code>. 公司名称
     */
    public String getCompanyname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ChineseStock.Company.currentprice</code>. Current stock price
     */
    public void setCurrentprice(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.currentprice</code>. Current stock price
     */
    public Double getCurrentprice() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>ChineseStock.Company.currentpricetimestamp</code>.
     */
    public void setCurrentpricetimestamp(Time value) {
        set(3, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.currentpricetimestamp</code>.
     */
    public Time getCurrentpricetimestamp() {
        return (Time) get(3);
    }

    /**
     * Setter for <code>ChineseStock.Company.openprice</code>. 开盘价
     */
    public void setOpenprice(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.openprice</code>. 开盘价
     */
    public Double getOpenprice() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>ChineseStock.Company.closeprice</code>. 昨日收盘价
     */
    public void setCloseprice(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.closeprice</code>. 昨日收盘价
     */
    public Double getCloseprice() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>ChineseStock.Company.marketcap</code>. 总市值
     */
    public void setMarketcap(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.marketcap</code>. 总市值
     */
    public Double getMarketcap() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>ChineseStock.Company.capitalizationvalue</code>. 流通市值
     */
    public void setCapitalizationvalue(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.capitalizationvalue</code>. 流通市值
     */
    public Double getCapitalizationvalue() {
        return (Double) get(7);
    }

    /**
     * Setter for <code>ChineseStock.Company.tradingvolume</code>. 成交量
     */
    public void setTradingvolume(Double value) {
        set(8, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.tradingvolume</code>. 成交量
     */
    public Double getTradingvolume() {
        return (Double) get(8);
    }

    /**
     * Setter for <code>ChineseStock.Company.tradingvalue</code>. 成交额
     */
    public void setTradingvalue(Double value) {
        set(9, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.tradingvalue</code>. 成交额
     */
    public Double getTradingvalue() {
        return (Double) get(9);
    }

    /**
     * Setter for <code>ChineseStock.Company.oscillation</code>. 股票振幅
     */
    public void setOscillation(Double value) {
        set(10, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.oscillation</code>. 股票振幅
     */
    public Double getOscillation() {
        return (Double) get(10);
    }

    /**
     * Setter for <code>ChineseStock.Company.turnoverrate</code>. 换手率
     */
    public void setTurnoverrate(Double value) {
        set(11, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.turnoverrate</code>. 换手率
     */
    public Double getTurnoverrate() {
        return (Double) get(11);
    }

    /**
     * Setter for <code>ChineseStock.Company.PBR</code>. 市净率 Price-to-book ratio
     */
    public void setPbr(Integer value) {
        set(12, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.PBR</code>. 市净率 Price-to-book ratio
     */
    public Integer getPbr() {
        return (Integer) get(12);
    }

    /**
     * Setter for <code>ChineseStock.Company.PER</code>. 市盈率
     */
    public void setPer(Integer value) {
        set(13, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.PER</code>. 市盈率
     */
    public Integer getPer() {
        return (Integer) get(13);
    }

    /**
     * Setter for <code>ChineseStock.Company.lastUpdateDateTime</code>. 最后一次更新时间
     */
    public void setLastupdatedatetime(Time value) {
        set(14, value);
    }

    /**
     * Getter for <code>ChineseStock.Company.lastUpdateDateTime</code>. 最后一次更新时间
     */
    public Time getLastupdatedatetime() {
        return (Time) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row15<String, String, Double, Time, Double, Double, Double, Double, Double, Double, Double, Double, Integer, Integer, Time> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row15<String, String, Double, Time, Double, Double, Double, Double, Double, Double, Double, Double, Integer, Integer, Time> valuesRow() {
        return (Row15) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Company.COMPANY.STOCKID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Company.COMPANY.COMPANYNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field3() {
        return Company.COMPANY.CURRENTPRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Time> field4() {
        return Company.COMPANY.CURRENTPRICETIMESTAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return Company.COMPANY.OPENPRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field6() {
        return Company.COMPANY.CLOSEPRICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field7() {
        return Company.COMPANY.MARKETCAP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field8() {
        return Company.COMPANY.CAPITALIZATIONVALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field9() {
        return Company.COMPANY.TRADINGVOLUME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field10() {
        return Company.COMPANY.TRADINGVALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field11() {
        return Company.COMPANY.OSCILLATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field12() {
        return Company.COMPANY.TURNOVERRATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field13() {
        return Company.COMPANY.PBR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field14() {
        return Company.COMPANY.PER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Time> field15() {
        return Company.COMPANY.LASTUPDATEDATETIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getStockid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getCompanyname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value3() {
        return getCurrentprice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Time value4() {
        return getCurrentpricetimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getOpenprice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value6() {
        return getCloseprice();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value7() {
        return getMarketcap();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value8() {
        return getCapitalizationvalue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value9() {
        return getTradingvolume();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value10() {
        return getTradingvalue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value11() {
        return getOscillation();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value12() {
        return getTurnoverrate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value13() {
        return getPbr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value14() {
        return getPer();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Time value15() {
        return getLastupdatedatetime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value1(String value) {
        setStockid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value2(String value) {
        setCompanyname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value3(Double value) {
        setCurrentprice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value4(Time value) {
        setCurrentpricetimestamp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value5(Double value) {
        setOpenprice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value6(Double value) {
        setCloseprice(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value7(Double value) {
        setMarketcap(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value8(Double value) {
        setCapitalizationvalue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value9(Double value) {
        setTradingvolume(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value10(Double value) {
        setTradingvalue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value11(Double value) {
        setOscillation(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value12(Double value) {
        setTurnoverrate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value13(Integer value) {
        setPbr(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value14(Integer value) {
        setPer(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord value15(Time value) {
        setLastupdatedatetime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CompanyRecord values(String value1, String value2, Double value3, Time value4, Double value5, Double value6, Double value7, Double value8, Double value9, Double value10, Double value11, Double value12, Integer value13, Integer value14, Time value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CompanyRecord
     */
    public CompanyRecord() {
        super(Company.COMPANY);
    }

    /**
     * Create a detached, initialised CompanyRecord
     */
    public CompanyRecord(String stockid, String companyname, Double currentprice, Time currentpricetimestamp, Double openprice, Double closeprice, Double marketcap, Double capitalizationvalue, Double tradingvolume, Double tradingvalue, Double oscillation, Double turnoverrate, Integer pbr, Integer per, Time lastupdatedatetime) {
        super(Company.COMPANY);

        set(0, stockid);
        set(1, companyname);
        set(2, currentprice);
        set(3, currentpricetimestamp);
        set(4, openprice);
        set(5, closeprice);
        set(6, marketcap);
        set(7, capitalizationvalue);
        set(8, tradingvolume);
        set(9, tradingvalue);
        set(10, oscillation);
        set(11, turnoverrate);
        set(12, pbr);
        set(13, per);
        set(14, lastupdatedatetime);
    }
}
